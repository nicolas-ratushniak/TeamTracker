<Application x:Class="TeamTracker.Wpf.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

             xmlns:viewModels="clr-namespace:TeamTracker.Wpf.ViewModels"
             xmlns:views="clr-namespace:TeamTracker.Wpf.Views"
             xmlns:controls="clr-namespace:TeamTracker.Wpf.Controls"
             xmlns:converters="clr-namespace:TeamTracker.Wpf.Converters">

    <Application.Resources>
        <converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />

        <!--Colors-->
        <Color x:Key="ColorAccent">#AA77FF</Color>
        <Color x:Key="ColorMinor">#C9EEFF</Color>
        <Color x:Key="ColorMinorFocused">#97DEFF</Color>
        <Color x:Key="GreyColor">#858a8c</Color>

        <!--Brushes-->
        <SolidColorBrush x:Key="BrushAccent" Color="{StaticResource ColorAccent}" />
        <SolidColorBrush x:Key="BrushMinor" Color="{StaticResource ColorMinor}" />
        <SolidColorBrush x:Key="BrushMinorFocused" Color="{StaticResource ColorMinorFocused}" />
        <SolidColorBrush x:Key="BrushGrey" Color="{StaticResource GreyColor}" />

        <!-- Text -->
        <Style x:Key="Title" TargetType="TextBlock">
            <Setter Property="FontSize" Value="32" />
            <Setter Property="FontWeight" Value="SemiBold" />
        </Style>

        <Style TargetType="TextBlock">
            <Setter Property="FontSize" Value="18" />
        </Style>

        <Style x:Key="ErrorMessage" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16" />
            <Setter Property="Foreground" Value="Crimson" />
            <Setter Property="TextWrapping" Value="Wrap" />
        </Style>

        <Style x:Key="AccentText" TargetType="TextBlock">
            <Setter Property="Foreground" Value="{StaticResource BrushAccent}" />
            <Setter Property="FontWeight" Value="500" />
            <Setter Property="FontSize" Value="18" />
        </Style>

        <!-- Buttons -->
        <Style x:Key="NiceButton" TargetType="Button">
            <Setter Property="Background" Value="{StaticResource BrushAccent}" />
            <Setter Property="Foreground" Value="#FFFFFF" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                Opacity="{TemplateBinding Opacity}"
                                CornerRadius="5">
                            <ContentPresenter Margin="17,7"
                                              HorizontalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Opacity" Value="0.8" />
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>

                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.8" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="CancelButton" TargetType="Button" BasedOn="{StaticResource NiceButton}">
            <Setter Property="Background" Value="{StaticResource BrushMinor}" />
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="FontWeight" Value="Regular" />
        </Style>
        
        <Style x:Key="DangerButton" TargetType="Button" BasedOn="{StaticResource NiceButton}">
            <Setter Property="Background" Value="#ed5b51" />
            <Setter Property="FontWeight" Value="Regular" />
        </Style>
        
        <Style x:Key="AdvancedButton" TargetType="Button">
            <Setter Property="FontSize" Value="16" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="Background" Value="#ffffff" />
            <Setter Property="Foreground" Value="{StaticResource BrushAccent}"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="BorderBrush" Value="{StaticResource BrushAccent}"/>
            
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding BorderBrush}"
                                CornerRadius="5"
                                Opacity="{TemplateBinding Opacity}"
                                Padding="2">
                            <Border Background="{TemplateBinding Background}"
                                    CornerRadius="3">
                                <ContentPresenter Margin="17,7"
                                                  HorizontalAlignment="Center" />
                            </Border>
                            
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource BrushAccent}" />
                    <Setter Property="Foreground" Value="#ffffff"/>
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>

                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.8" />
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="AdvancedCancelButton" TargetType="Button" BasedOn="{StaticResource AdvancedButton}">
            <Setter Property="Foreground" Value="{StaticResource BrushMinorFocused}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BrushMinorFocused}"/>
            
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource BrushMinorFocused}" />
                    <Setter Property="Foreground" Value="#ffffff"/>
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>

                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.8" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- RadioButtons -->
        <Style x:Key="NiceRadioButton" TargetType="RadioButton">
            <Setter Property="FontSize" Value="20" />
            <Setter Property="Background" Value="{StaticResource BrushMinor}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border Background="{TemplateBinding Background}"
                                Padding="35,10">
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource BrushMinorFocused}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- TextBox -->
        <Style x:Key="NiceTextBox" TargetType="TextBox">
            <Setter Property="FontSize" Value="16" />
            <Setter Property="BorderBrush" Value="{StaticResource BrushGrey}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                CornerRadius="5"
                                Padding="5">
                            <TextBox x:Name="NestedTextBox" BorderThickness="0"
                                     FontSize="{TemplateBinding FontSize}"
                                     Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                     VerticalAlignment="Center">
                            </TextBox>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="Black" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type controls:PlaceholderTextBox}">
            <Setter Property="BorderBrush" Value="{StaticResource BrushGrey}" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type controls:PlaceholderTextBox}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                BorderThickness="1"
                                CornerRadius="5"
                                Padding="5">
                            <Grid>
                                <TextBlock
                                    Text="{Binding Placeholder, RelativeSource={RelativeSource TemplatedParent}}"
                                    VerticalAlignment="Center"
                                    Margin="3,0,0,0"
                                    FontSize="{TemplateBinding FontSize}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Opacity="0.5"
                                    Panel.ZIndex="1"
                                    IsHitTestVisible="False"
                                    Visibility="{Binding IsTyping, RelativeSource={RelativeSource TemplatedParent},
                                    Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                                <TextBox
                                    Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                    VerticalAlignment="Center"
                                    Foreground="{TemplateBinding Foreground}"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    FontSize="{TemplateBinding FontSize}" />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="Black" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="NiceBorder" TargetType="Border">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{StaticResource BrushGrey}" />
            <Setter Property="CornerRadius" Value="5"/>
            <Setter Property="Padding" Value="5"></Setter>
            <Style.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="Black" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Binding views to related view models -->
        <DataTemplate DataType="{x:Type viewModels:TeamsViewModel}">
            <views:TeamsView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:GamesViewModel}">
            <views:GamesView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type viewModels:GameCreateFormViewModel}">
            <views:GameCreateView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:HelpViewModel}">
            <views:HelpView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:TeamCreateFormViewModel}">
            <views:TeamCreateView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:TeamUpdateFormViewModel}">
            <views:TeamUpdateView />
        </DataTemplate>

    </Application.Resources>
</Application>